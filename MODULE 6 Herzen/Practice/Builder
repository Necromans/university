using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection.Metadata;
using System.Text.Json;
using iTextSharp.text;
using iTextSharp.text.pdf;


public interface IReportBuilder
{
    void SetHeader(string header);
    void SetContent(string content);
    void SetFooter(string footer);
    void AddSection(string sectionName, string sectionContent);
    void SetStyle(ReportStyle style);
    Report GetReport();
}

public class ReportStyle
{
    public string BackgroundColor { get; set; }
    public string FontColor { get; set; }
    public float FontSize { get; set; }

    public ReportStyle(string backgroundColor, string fontColor, float fontSize)
    {
        BackgroundColor = backgroundColor;
        FontColor = fontColor;
        FontSize = fontSize;
    }
}

public class Report
{
    public string Header { get; private set; }
    public string Content { get; private set; }
    public string Footer { get; private set; }
    public Dictionary<string, string> Sections { get; private set; } = new Dictionary<string, string>();
    public ReportStyle Style { get; private set; }

    public void SetHeader(string header) => Header = header;
    public void SetContent(string content) => Content = content;
    public void SetFooter(string footer) => Footer = footer;
    public void AddSection(string sectionName, string sectionContent) => Sections[sectionName] = sectionContent;
    public void SetStyle(ReportStyle style) => Style = style;

    public void Export(string format, string filePath)
    {
        switch (format.ToLower())
        {
            case "text":
                ExportToText(filePath);
                break;
            case "html":
                ExportToHtml(filePath);
                break;
            case "pdf":
                ExportToPdf(filePath);
                break;
            case "json":
                ExportToJson(filePath);
                break;
            default:
                throw new ArgumentException("Неподдерживаемый формат экспорта.");
        }
    }

    private void ExportToText(string filePath)
    {
        using (var writer = new StreamWriter(filePath))
        {
            writer.WriteLine(Header);
            writer.WriteLine(Content);
            foreach (var section in Sections)
            {
                writer.WriteLine($"{section.Key}: {section.Value}");
            }
            writer.WriteLine(Footer);
        }
    }

    private void ExportToHtml(string filePath)
    {
        using (var writer = new StreamWriter(filePath))
        {
            writer.WriteLine("<html><body>");
            writer.WriteLine($"<h1>{Header}</h1>");
            writer.WriteLine($"<p>{Content}</p>");
            foreach (var section in Sections)
            {
                writer.WriteLine($"<h2>{section.Key}</h2><p>{section.Value}</p>");
            }
            writer.WriteLine($"<footer>{Footer}</footer>");
            writer.WriteLine("</body></html>");
        }
    }

    private void ExportToPdf(string filePath)
    {
        iTextSharp.text.Document doc = new iTextSharp.text.Document();
        PdfWriter.GetInstance(doc, new FileStream(filePath, FileMode.Create));
        doc.Open();
        doc.Add(new Paragraph(Header));
        doc.Add(new Paragraph(Content));
        foreach (var section in Sections)
        {
            doc.Add(new Paragraph(section.Key));
            doc.Add(new Paragraph(section.Value));
        }
        doc.Add(new Paragraph(Footer));
        doc.Close();
    }

    private void ExportToJson(string filePath)
    {
        var json = JsonSerializer.Serialize(this);
        File.WriteAllText(filePath, json);
    }
}

public class TextReportBuilder : IReportBuilder
{
    private readonly Report _report = new Report();

    public void SetHeader(string header) => _report.SetHeader(header);
    public void SetContent(string content) => _report.SetContent(content);
    public void SetFooter(string footer) => _report.SetFooter(footer);
    public void AddSection(string sectionName, string sectionContent) => _report.AddSection(sectionName, sectionContent);
    public void SetStyle(ReportStyle style) => _report.SetStyle(style);
    public Report GetReport() => _report;
}

public class HtmlReportBuilder : IReportBuilder
{
    private readonly Report _report = new Report();

    public void SetHeader(string header) => _report.SetHeader(header);
    public void SetContent(string content) => _report.SetContent(content);
    public void SetFooter(string footer) => _report.SetFooter(footer);
    public void AddSection(string sectionName, string sectionContent) => _report.AddSection(sectionName, sectionContent);
    public void SetStyle(ReportStyle style) => _report.SetStyle(style);
    public Report GetReport() => _report;
}

public class PdfReportBuilder : IReportBuilder
{
    private readonly Report _report = new Report();

    public void SetHeader(string header) => _report.SetHeader(header);
    public void SetContent(string content) => _report.SetContent(content);
    public void SetFooter(string footer) => _report.SetFooter(footer);
    public void AddSection(string sectionName, string sectionContent) => _report.AddSection(sectionName, sectionContent);
    public void SetStyle(ReportStyle style) => _report.SetStyle(style);
    public Report GetReport() => _report;
}

public class ReportDirector
{
    public void ConstructReport(IReportBuilder builder, ReportStyle style)
    {
        builder.SetStyle(style);
        builder.SetHeader("Отчет");
        builder.SetContent("Основное содержимое отчета.");
        builder.SetFooter("Конец отчета");
        builder.AddSection("Раздел 1", "Содержимое раздела 1");
        builder.AddSection("Раздел 2", "Содержимое раздела 2");
    }
}

class Program
{
    static void Main(string[] args)
    {
        ReportDirector director = new ReportDirector();

        // Создание текстового отчета
        IReportBuilder textBuilder = new TextReportBuilder();
        ReportStyle textStyle = new ReportStyle("white", "black", 12);
        director.ConstructReport(textBuilder, textStyle);
        Report textReport = textBuilder.GetReport();
        textReport.Export("text", "report.txt");

        // Создание HTML отчета
        IReportBuilder htmlBuilder = new HtmlReportBuilder();
        ReportStyle htmlStyle = new ReportStyle("white", "black", 14);
        director.ConstructReport(htmlBuilder, htmlStyle);
        Report htmlReport = htmlBuilder.GetReport();
        htmlReport.Export("html", "report.html");

        // Создание PDF отчета
        IReportBuilder pdfBuilder = new PdfReportBuilder();
        ReportStyle pdfStyle = new ReportStyle("white", "black", 16);
        director.ConstructReport(pdfBuilder, pdfStyle);
        Report pdfReport = pdfBuilder.GetReport();
        pdfReport.Export("pdf", "report.pdf");

        // Создание JSON отчета
        IReportBuilder jsonBuilder = new TextReportBuilder();
        ReportStyle jsonStyle = new ReportStyle("white", "black", 12);
        director.ConstructReport(jsonBuilder, jsonStyle);
        Report jsonReport = jsonBuilder.GetReport();
        jsonReport.Export("json", "report.json");

        Console.WriteLine("Отчеты успешно созданы.");
    }
}
