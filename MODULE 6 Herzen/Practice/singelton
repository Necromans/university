using System;
using System.IO;
using System.Text.Json;
using System.Threading;

public enum LogLevel
{
    INFO,
    WARNING,
    ERROR
}

public sealed class Logger
{
    private static readonly Lazy<Logger> _instance = new Lazy<Logger>(() => new Logger());
    private readonly object _lock = new object();
    private LogLevel _currentLogLevel = LogLevel.INFO;
    private string _logFilePath = "logs.txt";
    private long _maxLogFileSize = 1024 * 1024; // Максимальный размер файла 1MB
    private string _logDirectory = "logs"; // Директория для логов

    // Приватный конструктор предотвращает создание экземпляров извне
    private Logger()
    {
        // Создание директории, если она не существует
        if (!Directory.Exists(_logDirectory))
        {
            Directory.CreateDirectory(_logDirectory);
        }

        // Загрузка конфигурации логгера
        LoadConfiguration();
        InitializeLogFile();
        Log($"Logger инициализируется.", LogLevel.INFO);
    }

    // Статический метод для получения единственного экземпляра
    public static Logger GetInstance()
    {
        return _instance.Value;
    }

    // Метод для установки уровня логирования
    public void SetLogLevel(LogLevel level)
    {
        lock (_lock)
        {
            _currentLogLevel = level;
            Log($"Уровень логирования установлен на {level}", LogLevel.INFO);
        }
    }

    // Метод для записи логов
    public void Log(string message, LogLevel level)
    {
        if (level < _currentLogLevel)
            return;

        lock (_lock)
        {
            CheckLogFileSize();

            string logEntry = $"[{DateTime.Now}] [{level}] {message}";
            using (var writer = new StreamWriter(_logFilePath, true))
            {
                writer.WriteLine(logEntry);
            }
            Console.WriteLine(logEntry); // Логирование в консоль
        }
    }

    // Проверка размера лог-файла и ротация, если необходимо
    private void CheckLogFileSize()
    {
        FileInfo logFile = new FileInfo(_logFilePath);
        if (logFile.Exists && logFile.Length >= _maxLogFileSize)
        {
            RotateLogFile();
        }
    }

    // Метод для ротации лог-файла
    private void RotateLogFile()
    {
        string newLogFilePath = Path.Combine(_logDirectory, $"{Path.GetFileNameWithoutExtension(_logFilePath)}_{DateTime.Now:yyyyMMdd_HHmmss}{Path.GetExtension(_logFilePath)}");
        File.Move(_logFilePath, newLogFilePath);
        InitializeLogFile();
    }

    // Инициализация лог-файла
    private void InitializeLogFile()
    {
        using (var writer = new StreamWriter(_logFilePath, false))
        {
            writer.WriteLine($"[{DateTime.Now}] Logger инициализируется.");
        }
    }

    // Загрузка конфигурации из файла
    private void LoadConfiguration()
    {
        try
        {
            var configFilePath = "loggerConfig.json";
            if (File.Exists(configFilePath))
            {
                var config = JsonSerializer.Deserialize<LoggerConfig>(File.ReadAllText(configFilePath));
                if (config != null)
                {
                    _logFilePath = config.LogFilePath;
                    _currentLogLevel = config.LogLevel;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки конфигурации: {ex.Message}");
        }
    }
}

// Конфигурация логгера
public class LoggerConfig
{
    public string LogFilePath { get; set; } = "logs.txt";
    public LogLevel LogLevel { get; set; } = LogLevel.INFO;
}

public class LogReader
{
    private readonly string _logFilePath;

    public LogReader(string logFilePath)
    {
        _logFilePath = logFilePath;
    }

    // Метод для чтения логов из файла и отображения на экране с фильтрацией по уровню логирования
    public void ReadLogs(LogLevel? filterLevel = null)
    {
        lock (Logger.GetInstance())
        {
            if (File.Exists(_logFilePath))
            {
                string[] logs = File.ReadAllLines(_logFilePath);
                Console.WriteLine("===== Логи =====");
                foreach (var log in logs)
                {
                    if (filterLevel == null || log.Contains($"[{filterLevel}]"))
                    {
                        Console.WriteLine(log);
                    }
                }
                Console.WriteLine("================");
            }
            else
            {
                Console.WriteLine("Лог-файл не найден.");
            }
        }
    }
}

class Program
{
    static void Main(string[] args)
    {
        Logger logger = Logger.GetInstance();

        // Установка начального уровня логирования
        logger.SetLogLevel(LogLevel.INFO);

        // Создание и запуск нескольких потоков
        Thread thread1 = new Thread(() => LogMessages("Thread1", LogLevel.INFO));
        Thread thread2 = new Thread(() => LogMessages("Thread2", LogLevel.WARNING));
        Thread thread3 = new Thread(() => LogMessages("Thread3", LogLevel.ERROR));

        thread1.Start();
        thread2.Start();
        thread3.Start();

        // Ожидание завершения потоков
        thread1.Join();
        thread2.Join();
        thread3.Join();

        // Чтение логов
        LogReader logReader = new LogReader("logs.txt");
        logReader.ReadLogs(LogLevel.ERROR); // Фильтрация по уровню логирования
    }

    static void LogMessages(string threadName, LogLevel level)
    {
        Logger logger = Logger.GetInstance();
        for (int i = 0; i < 5; i++)
        {
            logger.Log($"{threadName} - Сообщение {i + 1}", level);
            Thread.Sleep(100); // Имитация работы
        }
    }
}
