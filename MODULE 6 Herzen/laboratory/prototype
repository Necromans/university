using System;
using System.Collections.Generic;

// 1. Интерфейс IPrototype с методом Clone()
public interface IPrototype<T>
{
    T Clone();
}

// 2. Класс Section, представляющий раздел документа
public class Section : IPrototype<Section>
{
    public string Title { get; set; }
    public string Text { get; set; }

    public Section(string title, string text)
    {
        Title = title;
        Text = text;
    }

    // Метод клонирования
    public Section Clone()
    {
        return new Section(Title, Text);
    }

    public override string ToString()
    {
        return $"Раздел: {Title}, Текст: {Text}";
    }
}

// 3. Класс Image, представляющий изображение документа
public class Image : IPrototype<Image>
{
    public string Url { get; set; }

    public Image(string url)
    {
        Url = url;
    }

    // Метод клонирования
    public Image Clone()
    {
        return new Image(Url);
    }

    public override string ToString()
    {
        return $"Изображение: {Url}";
    }
}

// 4. Класс Table, представляющий таблицу в документе
public class Table : IPrototype<Table>
{
    public string Data { get; set; }

    public Table(string data)
    {
        Data = data;
    }

    // Метод клонирования
    public Table Clone()
    {
        return new Table(Data);
    }

    public override string ToString()
    {
        return $"Таблица: {Data}";
    }
}

// 5. Класс Chart, представляющий график в документе
public class Chart : IPrototype<Chart>
{
    public string ChartType { get; set; }
    public string Data { get; set; }

    public Chart(string chartType, string data)
    {
        ChartType = chartType;
        Data = data;
    }

    // Метод клонирования
    public Chart Clone()
    {
        return new Chart(ChartType, Data);
    }

    public override string ToString()
    {
        return $"График: {ChartType}, Данные: {Data}";
    }
}

// 6. Класс Document, представляющий основной документ
public class Document : IPrototype<Document>
{
    public string Title { get; set; }
    public string Content { get; set; }
    public List<Section> Sections { get; set; }
    public List<Image> Images { get; set; }
    public List<Table> Tables { get; set; }
    public List<Chart> Charts { get; set; }

    public Document(string title, string content)
    {
        Title = title;
        Content = content;
        Sections = new List<Section>();
        Images = new List<Image>();
        Tables = new List<Table>();
        Charts = new List<Chart>();
    }

    // Добавление раздела в документ
    public void AddSection(Section section)
    {
        Sections.Add(section);
    }

    // Добавление изображения в документ
    public void AddImage(Image image)
    {
        Images.Add(image);
    }

    // Добавление таблицы в документ
    public void AddTable(Table table)
    {
        Tables.Add(table);
    }

    // Добавление графика в документ
    public void AddChart(Chart chart)
    {
        Charts.Add(chart);
    }

    // Метод клонирования
    public Document Clone()
    {
        Document clone = new Document(Title, Content);

        // Клонирование всех разделов
        foreach (var section in Sections)
        {
            clone.AddSection(section.Clone());
        }

        // Клонирование всех изображений
        foreach (var image in Images)
        {
            clone.AddImage(image.Clone());
        }

        // Клонирование всех таблиц
        foreach (var table in Tables)
        {
            clone.AddTable(table.Clone());
        }

        // Клонирование всех графиков
        foreach (var chart in Charts)
        {
            clone.AddChart(chart.Clone());
        }

        return clone;
    }

    public override string ToString()
    {
        string sections = string.Join("\n", Sections);
        string images = string.Join("\n", Images);
        string tables = string.Join("\n", Tables);
        string charts = string.Join("\n", Charts);

        return $"Документ: {Title}\nСодержание: {Content}\nРазделы:\n{sections}\nИзображения:\n{images}\nТаблицы:\n{tables}\nГрафики:\n{charts}";
    }
}

// 7. Класс DocumentManager для управления клонированием и сохранением документов
public class DocumentManager
{
    // Метод для клонирования документа
    public Document CreateDocument(Document prototype)
    {
        return prototype.Clone();
    }

    // Простое сохранение документа в файл (текстовое представление)
    public void SaveDocument(Document document, string filePath)
    {
        System.IO.File.WriteAllText(filePath, document.ToString());
    }

    // Простое чтение документа из файла (чтение как строку)
    public string LoadDocument(string filePath)
    {
        return System.IO.File.ReadAllText(filePath);
    }
}

// 8. Тестирование системы
class Program
{
    static void Main(string[] args)
    {
        // Создаем новый документ с секцией, изображением, таблицей и графиком
        Document doc1 = new Document("Документ 1", "Это основной контент документа.");
        doc1.AddSection(new Section("Раздел 1", "Текст раздела 1"));
        doc1.AddImage(new Image("https://example.com/image1.jpg"));
        doc1.AddTable(new Table("Таблица с данными"));
        doc1.AddChart(new Chart("Линейный график", "Данные графика"));

        // Клонируем документ
        DocumentManager manager = new DocumentManager();
        Document doc2 = manager.CreateDocument(doc1);

        // Модифицируем клонированный документ
        doc2.Title = "Документ 2 (Клон)";
        doc2.AddSection(new Section("Раздел 2", "Текст нового раздела в клоне"));
        doc2.AddImage(new Image("https://example.com/image2.jpg"));

        // Сохраняем документы в файлы
        manager.SaveDocument(doc1, "document1.txt");
        manager.SaveDocument(doc2, "document2.txt");

        // Загружаем документ из файла и выводим на экран
        string loadedDoc1 = manager.LoadDocument("document1.txt");
        string loadedDoc2 = manager.LoadDocument("document2.txt");

        // Вывод оригинала, клона и загруженных документов
        Console.WriteLine("Оригинальный документ из файла:");
        Console.WriteLine(loadedDoc1);
        Console.WriteLine("\nКлонированный документ из файла:");
        Console.WriteLine(loadedDoc2);
    }
}
