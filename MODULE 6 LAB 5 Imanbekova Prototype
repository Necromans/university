using Newtonsoft.Json;
using System.Collections.Generic;

public interface IPrototype
{
    IPrototype Clone();
}


public class Section : IPrototype
{
    public string Title { get; set; }
    public string Text { get; set; }

    public Section() { }

    public Section(string title, string text)
    {
        Title = title;
        Text = text;
    }

    public IPrototype Clone()
    {
        return new Section(this.Title, this.Text);
    }

    public override string ToString()
    {
        return $"Раздел: {Title}\nТекст: {Text}\n";
    }
}


public class Image : IPrototype
{
    public string Url { get; set; }

    public Image() { }

    public Image(string url)
    {
        Url = url;
    }

    public IPrototype Clone()
    {
        return new Image(this.Url);
    }

    public override string ToString()
    {
        return $"Изображение: {Url}\n";
    }
}




public class Document : IPrototype
{
    public string Title { get; set; }
    public string Content { get; set; }
    public List<IPrototype> Elements { get; set; } = new List<IPrototype>();

    public Document() { }

    public Document(string title, string content)
    {
        Title = title;
        Content = content;
    }

    public void AddElement(IPrototype element)
    {
        Elements.Add(element);
    }

    public IPrototype Clone()
    {
        Document clone = new Document(this.Title, this.Content);
        foreach (var element in this.Elements)
        {
            clone.AddElement(element.Clone());
        }
        return clone;
    }

    public override string ToString()
    {
        string result = $"Документ: {Title}\nСодержание: {Content}\nЭлементы:\n";
        foreach (var element in Elements)
        {
            result += element.ToString();
        }
        return result;
    }
}


public class DocumentManager
{
    public Document CreateDocument(Document prototype)
    {
        return (Document)prototype.Clone();
    }

    public void SaveDocument(Document doc, string filePath)
    {
        string json = JsonConvert.SerializeObject(doc, Formatting.Indented, new JsonSerializerSettings
        {
            TypeNameHandling = TypeNameHandling.All
        });
        File.WriteAllText(filePath, json);
    }

    public Document LoadDocument(string filePath)
    {
        if (!File.Exists(filePath))
            throw new FileNotFoundException("Файл не найден.");

        string json = File.ReadAllText(filePath);
        return JsonConvert.DeserializeObject<Document>(json, new JsonSerializerSettings
        {
            TypeNameHandling = TypeNameHandling.All
        });
    }
}


public class Table : IPrototype
{
    public string Title { get; set; }
    public string Data { get; set; }

    public Table() { }

    public Table(string title, string data)
    {
        Title = title;
        Data = data;
    }

    public IPrototype Clone()
    {
        return new Table(this.Title, this.Data);
    }

    public override string ToString()
    {
        return $"Таблица: {Title}\nДанные: {Data}\n";
    }
}




class Program
{
    static void Main(string[] args)
    {
        // Создание прототипа документа
        Document prototypeDoc = new Document("Прототип Документа", "Это содержимое прототипа.");
        prototypeDoc.AddElement(new Section("Введение", "Это введение."));
        prototypeDoc.AddElement(new Image("https://example.com/image1.png"));
        prototypeDoc.AddElement(new Table("Таблица 1", "Строка1, Строка2"));
        

        // Создание менеджера документов
        DocumentManager manager = new DocumentManager();

        // Клонирование документа
        Document clonedDoc = manager.CreateDocument(prototypeDoc);
        clonedDoc.Title = "Клонированный Документ";
        clonedDoc.Content = "Это содержимое клонированного документа.";
        clonedDoc.AddElement(new Section("Заключение", "Это заключение."));
        clonedDoc.AddElement(new Image("https://example.com/image2.png"));
        clonedDoc.AddElement(new Table("Таблица 2", "Строка3, Строка4"));

        // Вывод документов
        Console.WriteLine("=== Прототип Документа ===");
        Console.WriteLine(prototypeDoc);
        Console.WriteLine("=== Клонированный Документ ===");
        Console.WriteLine(clonedDoc);

        // Удаление последнего элемента
        if (clonedDoc.Elements.Count > 0)
        {
            clonedDoc.Elements.RemoveAt(clonedDoc.Elements.Count - 1);
        }

        // Сохранение клонированного документа
        manager.SaveDocument(clonedDoc, "cloned_document.json");

        // Загрузка документа из файла
        Document loadedDoc = manager.LoadDocument("cloned_document.json");
        Console.WriteLine("=== Загрузка Документа из файла ===");
        Console.WriteLine(loadedDoc);

    }
}

