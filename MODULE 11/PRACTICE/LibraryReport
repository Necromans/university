Book (Книга)

Атрибуты:
Title: string — Название книги.
ISBN: string — Уникальный идентификатор книги (ISBN).
AvailabilityStatus: bool — Статус доступности книги (доступна или нет).
Методы:
GetBookInfo(): string — Получить информацию о книге.
ChangeAvailabilityStatus(status: bool): void — Изменить доступность книги.
Author (Автор)

Атрибуты:
Name: string — Имя автора.
Методы:
GetAuthorInfo(): string — Получить информацию об авторе.
User (Пользователь)

Атрибуты:
Id: int — Уникальный идентификатор пользователя.
Name: string — Имя пользователя.
Email: string — Электронная почта пользователя.
UserType: UserType — Тип пользователя (Читатель или Библиотекарь).
Методы:
Register(): void — Регистрация пользователя.
Login(): void — Вход пользователя в систему.
Reader (Читатель) — наследует от User

Методы:
BorrowBook(book: Book): void — Заказать книгу.
ReturnBook(book: Book): void — Вернуть книгу.
Librarian (Библиотекарь) — наследует от User

Методы:
AddBook(book: Book, library: Library): void — Добавить книгу в библиотеку.
RemoveBook(book: Book, library: Library): void — Удалить книгу из библиотеки.
Loan (Выдача книги)

Атрибуты:
Book: Book — Книга, которую выдали.
Reader: Reader — Читатель, который взял книгу.
LoanDate: DateTime — Дата выдачи книги.
ReturnDate: DateTime — Дата возврата книги.
Методы:
IssueLoan(): void — Оформить выдачу книги.
ReturnBook(): void — Оформить возврат книги.
Library (Библиотека)

Атрибуты:
Books: List<Book> — Список книг в библиотеке.
Users: List<User> — Список пользователей библиотеки.
Методы:
AddBook(book: Book): void — Добавить книгу в библиотеку.
RemoveBook(book: Book): void — Удалить книгу из библиотеки.
RegisterUser(user: User): void — Зарегистрировать пользователя.
GenerateReport(): void — Сгенерировать отчет по библиотеке.
Report (Отчет)

Методы:
GenerateBookPopularityReport(): void — Сгенерировать отчет о популярности книг.
GenerateUserActivityReport(): void — Сгенерировать отчет об активности пользователей.
Связи между классами:
Книга может быть написана несколькими Авторами (связь "многие ко многим").

В реальной системе для этого может быть использована промежуточная сущность, например, BookAuthor, чтобы отразить многие ко многим.
Читатель может взять несколько Книг через Выдачу (связь "один ко многим").

Один Reader может иметь несколько записей в Loan.
Библиотекарь может добавлять и удалять книги из библиотеки (связь с Library).

Librarian имеет методы для управления книгами в Library.
Библиотека содержит список Книг и Пользователей (связь "один ко многим").

В Library хранится список книг, пользователей и операций.
Выдача связана с Читателем и Книгой (связь "один к одному").

Каждая выдача книги оформляется через класс Loan, который связан с конкретным Book и Reader.
