using System;
using System.IO;

// Абстрактный класс ReportGenerator
public abstract class ReportGenerator
{
    // Шаблонный метод для генерации отчета
    public void GenerateReport()
    {
        CollectData();
        ProcessData();
        FormatData();
        SaveReport();
        if (CustomerWantsEmail())
        {
            SendEmail();
        }
    }

    protected abstract void CollectData();
    protected abstract void ProcessData();
    protected abstract void FormatData();
    protected abstract void SaveReport();

    // Перехватываемый метод (hook)
    protected virtual bool CustomerWantsEmail()
    {
        return false; // По умолчанию не отправляем по электронной почте
    }

    private void SendEmail()
    {
        Console.WriteLine("Отправка отчета по электронной почте.");
    }
}

// Конкретный класс PdfReport
public class PdfReport : ReportGenerator
{
    protected override void CollectData()
    {
        Console.WriteLine("Сбор данных для PDF-отчета.");
    }

    protected override void ProcessData()
    {
        Console.WriteLine("Обработка данных для PDF-отчета.");
    }

    protected override void FormatData()
    {
        Console.WriteLine("Форматирование данных для PDF-отчета.");
    }

    protected override void SaveReport()
    {
        Console.WriteLine("Сохранение PDF-отчета.");
    }
}

// Конкретный класс ExcelReport
public class ExcelReport : ReportGenerator
{
    protected override void CollectData()
    {
        Console.WriteLine("Сбор данных для Excel-отчета.");
    }

    protected override void ProcessData()
    {
        Console.WriteLine("Обработка данных для Excel-отчета.");
    }

    protected override void FormatData()
    {
        Console.WriteLine("Форматирование данных для Excel-отчета.");
    }

    protected override void SaveReport()
    {
        Console.WriteLine("Сохранение Excel-отчета.");
    }

    protected override bool CustomerWantsEmail()
    {
        Console.Write("Хотите отправить отчет по электронной почте? (да/нет): ");
        string answer = Console.ReadLine().ToLower();
        return answer == "да";
    }
}

// Конкретный класс HtmlReport
public class HtmlReport : ReportGenerator
{
    protected override void CollectData()
    {
        Console.WriteLine("Сбор данных для HTML-отчета.");
    }

    protected override void ProcessData()
    {
        Console.WriteLine("Обработка данных для HTML-отчета.");
    }

    protected override void FormatData()
    {
        Console.WriteLine("Форматирование данных для HTML-отчета.");
    }

    protected override void SaveReport()
    {
        Console.WriteLine("Сохранение HTML-отчета.");
    }
}

// Конкретный класс CsvReport
public class CsvReport : ReportGenerator
{
    protected override void CollectData()
    {
        Console.WriteLine("Сбор данных для CSV-отчета.");
    }

    protected override void ProcessData()
    {
        Console.WriteLine("Обработка данных для CSV-отчета.");
    }

    protected override void FormatData()
    {
        Console.WriteLine("Форматирование данных для CSV-отчета.");
    }

    protected override void SaveReport()
    {
        Console.WriteLine("Сохранение CSV-отчета.");
    }
}

// Клиентский код
class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("Генерация PDF-отчета:");
        ReportGenerator pdfReport = new PdfReport();
        pdfReport.GenerateReport();

        Console.WriteLine("\nГенерация Excel-отчета:");
        ReportGenerator excelReport = new ExcelReport();
        excelReport.GenerateReport();

        Console.WriteLine("\nГенерация HTML-отчета:");
        ReportGenerator htmlReport = new HtmlReport();
        htmlReport.GenerateReport();

        Console.WriteLine("\nГенерация CSV-отчета:");
        ReportGenerator csvReport = new CsvReport();
        csvReport.GenerateReport();
    }
}
